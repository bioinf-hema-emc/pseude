norm_counts <- DESeq2::counts(dds, normalized = TRUE)
norm_counts
# Compute normalized counts
norm_counts <- data.table(DESeq2::counts(dds, normalized = TRUE))
# Compute normalized counts
norm_counts <- data.table::data.table(DESeq2::counts(dds, normalized = TRUE))
norm_counts
res
as.data.table(res)
data.table::as.data.table(res)
?data.table::as.data.table()
data.table::setDT(res)
tnorm_counts <- data.table::as.data.table(DESeq2::counts(dds, normalized = TRUE))
tnorm_counts
norm_counts
identical(norm_counts, tnorm_counts)
data.table::as.data.table(res)
data.table::as.data.table(res, keep.rownames = TRUE)
suppressWarnings(data.table::as.data.table(res, keep.rownames = TRUE))
# Compute normalized counts
norm_counts <- asdt(DESeq2::counts(dds, normalized = TRUE))
tnorm_counts <- data.table::as.data.table(DESeq2::counts(dds, normalized = TRUE))
tnorm_counts
res
tres <- suppressWarnings(data.table::as.data.table(res, keep.rownames = TRUE))
tres
out_res <- cbind(tres, tnorm_counts)
out_res
data.table::setnames(out_res, 'gene')
colnames(out_res)
data.table::setorder(out_res, padj)
out_res
res
na.omit(res)
out_sign <- out_res[padj < 0.05, ]
out_sing
out_sign
out_sign <- na.omit(out_res[padj < 0.05, ])
out_sign
?openxlsx::addWorksheet
?openxlsx::writeDataTable
?openxlsx::createWorkbook
openxlsx::createStyle
?openxlsx::createStyle
out_res
out_res[, rn:padj]
document()
load_all()
scout(dds)
res <- DESeq2::lfcShrink(dds, contrast = strsplit("state,young,old", split = ",")[[1]], type = "ashr", quiet = TRUE)
res
res <- data.table::as.data.table(DESeq2::lfcShrink(dds, contrast = strsplit("state,young,old", split = ",")[[1]], type = "ashr", quiet = TRUE))
res
res <- data.table::as.data.table(DESeq2::lfcShrink(dds, contrast = strsplit("state,young,old", split = ",")[[1]], type = "ashr", quiet = TRUE), keep.rownames = TRUE)
res
dim(res)
asdt <- function(x, keep.rownames = FALSE, ...) {
data.table::as.data.table(x, keep.rownames = FALSE, ...)
}
# Compute normalized counts
norm_counts <- asdt(DESeq2::counts(dds, normalized = TRUE))
norm_counts
dim(norm_counts)
rownames(dds)
document()
load_all()
scout(dds)
document()
load_all()
scout(dds)
out_res
out_res[, 1:6]
document()
load_all()
scout(dds)
xlsx_style <- openxlsx::createStyle(numFmt = "SCIENTIFIC",
borderColour = "#4F80BD",
borderStyle = "medium")
xlsx_style
document()
load_all()
scout(dds)
out_res["padj" < 0.05]
out_res[padj < 0.05]
out_res[("padj") < 0.05]
out_res[(c"padj") < 0.05]
out_res[c("padj") < 0.05]
out_res[out_res$padj < 0.05]
find("na.omit")
document()
load_all()
scout(dds)
use_package("DESeq2")
document()
load_all()
use_data(raw_counts)
agg_dt
raw_annotation <- agg_dt
use_data(raw_annotation)
raw_counts
raw_annotation
document()
load_all()
agg_counts
use_data(agg_counts)
annot_table
agg_table <- annot_table
use_data(agg_table)
dds
results(dds)
agg_dds <- dds
use_data(agg_data)
use_data(agg_dds)
agg_counts
colnames(agg_counts)
raw_table <- raw_annotation
use_data(raw_table)
agg_table
agg_dds
str(agg_dds)
slots(agg_dds)
slotNames(agg_dds)
document()
load_all()
?scaggregate
example_agg <- scaggregate(sc_counts = raw_counts,
sc_table = raw_table,
sc_group = "sample_name")
example_agg
test()
test()
check()
use_package("Matrix.utils")
document()
load_all()
check()
find("as.formula")
find("na.omit")
document()
document()
load_all()
document()
getwd()
document()
load_all()
library(devtools)
getwd()
document(
)
document()
load_all()
check()
library(ashr)
use_package(ashr)
use_package("ashr")
document()
load_all()
check()
?data.table::setorderv()
scout(agg_dds)
# Define variables
spl_com <- strsplit("state,young,old", split = ",")[[1]]
# Generate result table with ASHR-shrunk log2FC
res <- DESeq2::lfcShrink(agg_dds, contrast = spl_com, type = "ashr",
quiet = TRUE)
res
?as.data.frame
data.frame(res)
# Compute normalized counts
norm_counts <- data.frame(DESeq2::counts(agg_dds, normalized = TRUE))
res <- data.frame(res)
res
?data.frame
cbind(res, norm_counts)
out_res <- cbind(res, norm_counts)
# Clarify column content
colnames(out_res)[1:5] <- c("basemean", "l2fc_ASHR", "standerror_ASHR",
"pvalue", "padj")
out_res
# Reorder output table on adjusted p-value
out_res <- out_res[order(out_res$padj), c(4:5, 2:3, 1)]
out_res
out_res <- cbind(res, norm_counts)
out_res
colnames(out_res)[1:5] <- c("basemean", "l2fc_ASHR", "standerror_ASHR",
"pvalue", "padj")
# Reorder output table on adjusted p-value
out_res <- out_res[order(out_res$padj), c(4:5, 2:3, 1, 6:ncol(out_res))]
out_res
# Select significant genes
out_sign <- stats::na.omit(out_res[out_res$padj < 0.05, ])
out_sign
? openxlsx::writeDataTable
load("~/git_projects/pseude/data/raw_table.rda")
raw_table
data.frame(raw_table)
as.data.frame(raw_table)
raw_test <- data.frame(raw_table[, 2:3], row.names = raw_table[,1])
raw_test <- data.frame(raw_table[, 2:3], row.names = raw_table[,cell_name])
raw_test
str(raw_test)
raw_table <- raw_test
use_data(raw_table)
use_data(raw_table, overwrite = TRUE)
load("~/git_projects/pseude/data/agg_table.rda")
agg_table
data.frame(agg_table)
data.frame(agg_table, row.names = agg_table[, sample_name])
agg_table <- data.frame(agg_table, row.names = agg_table[, sample_name])
str(agg_table)
use_data(agg_table, overwrite = TRUE)
document()
load_all()
check()
document()
load_all()
example_agg <- scagg(raw_counts, raw_table)
example_agg
scdeseq(example_agg, agg_table)
example_dds <- scdeseq(example_agg, agg_table)
scout(example_dds)
check()
document()
load_all()
check()
use_mit_license()
document()
load_all()
check()
list.files()
check()
??DESeq2::DESeq
register(MulticoreParam(threads))
?DESeq2::DESeq
use_package("BiocParallel")
document()
document()
load_all()
example_dds <- scdeseq(agg_counts = agg_counts, agg_table = agg_table)
check()
document()
load_all()
example_out <- scout(dds = agg_dds, comparison = "state,young,old", do_write = FALSE)
example_out
document()
load_all()
check()
use_readme_rmd()
?devtools::build_readme()
devtools::build_readme()
document()
devtools::build_readme()
document()
library(devtools)
history()
build_readme()
document()
load_all()
?DESeq2::plotPCA
vsd <- varianceStabilizingTransformation(agg_dds, blind = TRUE, fitType = "parametric")
vsd <- DESeq2::varianceStabilizingTransformation(agg_dds, blind = TRUE, fitType = "parametric")
DESeq2::plotPCA(vsd)
colData(agg_dds)
DESeq2::colData(agg_dds)
find("colData")
?find
SummarizedExperiment::colData(agg_dds)
vsd <- DESeq2::varianceStabilizingTransformation(agg_dds, blind = TRUE, intgroup = "state", fitType = "parametric")
DESeq2::plotPCA(vsd, intgroup = "state")
?title
DESeq2::plotPCA(vsd, intgroup = "state") + title(main = "testing")
DESeq2::plotPCA(vsd, intgroup = "state") + ggplot2::ggtitle(main = "testing")
DESeq2::plotPCA(vsd, intgroup = "state") + ggplot2::ggtitle("testing")
DESeq2::plotPCA(vsd, intgroup = "state") + ggplot2::ggtitle("testing") + ggrepel::geom_text_repel(ggplot2::aes(label = name))
DESeq2::plotPCA(vsd, intgroup = "state") + ggplot2::ggtitle("testing") + ggplot2::aes(label = name)
DESeq2::plotPCA(vsd, intgroup = "state") + ggplot2::ggtitle("testing") + ggrepel::geom_text_repel(ggplot2::aes(label = name))
DESeq2::plotPCA(vsd, intgroup = "state") +
ggplot2::ggtitle("testing") +
ggrepel::geom_text_repel(ggplot2::aes(label = name))
DESeq2::plotPCA(vsd, intgroup = "state")
DESeq2::plotPCA(vsd, intgroup = "state", returnData = TRUE)
test_plot <- DESeq2::plotPCA(vsd, intgroup = "state", returnData = TRUE)
test_plot
?ggplot::plot
plot(test_plot)
ggplot2:ggplot(test_plot)
ggplot2::ggplot(test_plot)
ggplot2::ggplot(test_plot aes(PC1, PC2, color=Group))
ggplot2::ggplot(test_plot, aes(PC1, PC2, color=Group))
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=Group))
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=group)
)
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)
)
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state))
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)) + ggplot2::geom_point(size = 3)
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)) + ggplot2::geom_point(size = 3) + ggplot2::coord_fixed()
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)) + ggplot2::geom_point(size = 3)
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)) + ggplot2::geom_point(size = 3) + ggplot2::coord_fixed()
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)) + ggplot2::geom_point(size = 3)
ggplot2::ggplot(test_plot, ggplot2::aes(PC1, PC2, color=state)) + ggplot2::geom_point(size = 3) + ggplot2::coord_fixed()
document()
document()
document()
load_all()
test_schow(agg_dds, "state,young,old")
test_schow <- schow(agg_dds, "state,young,old")
test_schow()
test_schow
document()
load_all()
sctest <- schow(agg_dds, comparison = "state,young,old")
sctest
document()
load_all()
sctest <- schow(agg_dds, comparison = "state,young,old")
sctest
document()
load_all()
sctest <- schow(agg_dds, comparison = "state,young,old")
document(); load_all()
document(); load_all(); sctest <- schow(agg_dds, comparison = "state,young,old")
sctest
document(); load_all(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
document(); load_all(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
?ggplot2::aes
document(); load_all(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
sctest
DESeq2::plotPCA(vsd, intgroup = "state") +
ggplot2::ggtitle("testing") +
ggrepel::geom_text_repel(ggplot2::aes(label = name))
# PCA plots ---------------------------
test_sc <- DESeq2::plotPCA(vsd, intgroup = "state", returnData = TRUE)
test_sc
ggplot2::ggplot(test_sc, ggplot2::aes(PC1, PC2, colour = "state")) +
ggplot2::geom_point(size = 3) +
ggplot2::coord_fixed()
ggplot2::ggplot(test_sc, ggplot2::aes(PC1, PC2, colour = group)) +
ggplot2::geom_point(size = 3) +
ggplot2::coord_fixed()
document(); load_all(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
?attr
?percentVar
test_sc
percentVar <- round(100 * attr(test_sc, "percentVar"))
percentVar
str(test_sc)
?xlab
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
sctest
names(sctest)
scn <- names(sctest)
lapply(scn, function(x) {print(sctest[[x]])})
lapply(scn, function(x) {sctest[[x]]})
lapply(scn, function(x) {new_test <- sctest[[x]]; round(100 * attr(new_test, "percentVar"))})
lapply(scn, function(x) {new_test <- sctest[[x]]; round(100 * attr(new_test, "percentVar"))[2]})
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
?use_package()
use_package("ggplot2", type = "Suggests")
use_package("ggrepel", type = "Suggests")
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
?DESeq2::plotMA
scres <- data.frame(DESeq2::lfcShrink(agg_dds, contrast = spl_com, type = "ashr",
quiet = TRUE))
spl_com <- strsplit("state,young,old", split = ",")[[1]]
scres <- data.frame(DESeq2::lfcShrink(agg_dds, contrast = spl_com, type = "ashr",
quiet = TRUE))
# Get MA values ---------------------------
DESeq2::plotMA(scres)
scres
res <- DESeq2::lfcShrink(agg_dds, contrast = spl_com, type = "ashr", quiet = TRUE)
# Get MA values ---------------------------
DESeq2::plotMA(scres)
# Get MA values ---------------------------
DESeq2::plotMA(res)
# Get MA values ---------------------------
DESeq2::plotMA(res, ylim = c(-4, 4))
# Get MA values ---------------------------
DESeq2::plotMA(res, ylim = c(-4, 4), returnData = TRUE)
?DESeq2::plotMA
# Get MA values ---------------------------
scma <- DESeq2::plotMA(res, ylim = c(-4, 4), returnData = TRUE)
str(scma)
# Get MA values ---------------------------
scma <- DESeq2::plotMA(res, returnData = TRUE)
str(scma)
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
sctest
# Get MA values ---------------------------
ma_res <- DESeq2::plotMA(res, returnData = TRUE)
test_sc
dds <- agg_dds
rld <- DESeq2::rlog(dds, blind = FALSE)
rlb <- DESeq2::rlog(dds)
vsd <- DESeq2::varianceStabilizingTransformation(dds, blind = FALSE)
vsb <- DESeq2::varianceStabilizingTransformation(dds)
trans_list <- list(rlog = rld,
rlog_b = rlb,
varstab = vsd,
varstab_b = vsb)
trans_list <- trans_list[!sapply(trans_list, is.null)]
# Get PCA values ---------------------------
pca_list <- lapply(trans_list, DESeq2::plotPCA, intgroup = spl_com[1], returnData = TRUE)
pca_list
all_list <- c(pca_list, ma_res)
str(all_list)
all_list <- list(pca_list, ma_res)
str(all_list)
# Get MA values ---------------------------
ma_res <- list(DESeq2::plotMA(res, returnData = TRUE))
ma_res
all_list <- c(pca_list, ma_res)
str(all_list)
# Get MA values ---------------------------
ma_res <- list(res_MA = DESeq2::plotMA(res, returnData = TRUE))
all_list <- c(pca_list, ma_res)
str(all_list)
?densCols
res
document(); sctest <- schow(agg_dds, comparison = "state,young,old", do_write = TRUE)
devtools::check()
document()
devtools::document()
devtools::document()
devtools::check()
densCols()
schow(dds = agg_dds, comparison = "state,young,old")
find("densCols")
usethis::use_package("KernSmooth")
document()
devtools::document()
devtools::check()
raw_counts
library(devtools)
load_all()
raw_counts
?sample
1:10
seq(nrow(raw_counts))
sample(seq(nrow(raw_counts)), 5)
sample(seq(nrow(raw_counts)), 25)
raw_counts[sample(seq(nrow(raw_counts)), 25),]
object.size(raw_counts[sample(seq(nrow(raw_counts)), 25),])
object.size(raw_counts[sample(seq(nrow(raw_counts)), 25),], units = "Kb")
print(raw_counts[sample(seq(nrow(raw_counts)), 25),], units = "Kb")
object.size(raw_counts[sample(seq(nrow(raw_counts)), 25),])
format(object.size(raw_counts[sample(seq(nrow(raw_counts)), 25),]), units = "Kb")
format(object.size(raw_counts[sample(seq(nrow(raw_counts)), 25),]), units = "Mb")
format(object.size(raw_counts[sample(seq(nrow(raw_counts)), 25),]), units = "Mb")
raw_counts[sample(seq(nrow(raw_counts)), 25),])
raw_counts[sample(seq(nrow(raw_counts)), 25),]
test_counts <- raw_counts[sample(seq(nrow(raw_counts)), 25),]
test_counts <- test_counts[, sample(seq(ncol(raw_counts)), 25),]
test_counts
colnames(test_counts)
test_counts <- raw_counts[sample(seq(nrow(raw_counts)), 25),]
test_counts <- test_counts[, sample(seq(ncol(raw_counts)), 250),]
format(object.size(test_counts), units = "Mb")
format(object.size(test_counts), units = "Kb")
test_counts <- raw_counts[sample(seq(nrow(raw_counts)), 25), sample(seq(ncol(raw_counts)), 2500)]; format(object.size(test_counts), units = "Kb")
test_counts
raw_table
raw_table[match(rownames(raw_table), colnames(test_counts))]
raw_table[match(rownames(raw_table), colnames(test_counts)),]
raw_table[match(colnames(test_counts), rownames(raw_table)),]
test_table <- raw_table[match(colnames(test_counts), rownames(raw_table)),]
test_agg <- scagg(test_counts, test_table)
test_agg
agg_table
test_dds <- scdeseq(test_agg, agg_table)
test_dds
agg_dds
format(object.size(test_dds), units = 'Kb')
test_out <- scout(test_dds, do_write = FALSE)
test_out
format(object.size(test_dds), units = 'Kb')
format(object.size(test_counts), units = 'Kb')
format(object.size(test_agg), units = 'Kb')
format(object.size(test_table), units = 'Kb')
raw_table
test_table
str(test_table)
str(raw_table)
format(object.size(raw_table), units = 'Kb')
format(object.size(raw_table), units = 'KB')
format(object.size(test_dds), units = 'Kb')
format(object.size(agg_dds), units = 'Kb')
View(test_out)
?use_data
raw_counts <- test_counts
raw_table <- test_table
agg_dds <- test_dds
agg_counts <- test_agg
use_data(raw_counts, overwrite = TRUE)
use_data(raw_table, overwrite = TRUE)
use_data(agg_counts, overwrite = TRUE)
use_data(agg_dds, overwrite = TRUE)
dim(raw_table)
dim(raw_counts)
agg_counts
document()
check()
check()
build_readme()
document()
document()
styler::style_pkg()
